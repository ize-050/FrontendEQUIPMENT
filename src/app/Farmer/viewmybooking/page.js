"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import MainHeader from '../../../components/MainHeader';
import styles from "./viewmybooking.module.css";


export default function ViewMyBookingPage() {
  const [bookings, setBookings] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const router = useRouter();

  const getStatusText = (status) => {
    const statusMap = {
      'pending': '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
      'checkpayment': '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
      'approvepayment': '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
      'rejectpayment': '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
      'processing': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
      'delivering': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á',
      'delivered': '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
      'completed': '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
      'cancelled': '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
    };
    return statusMap[status] || status;
  };

  const getStatusColor = (status) => {
    const colorMap = {
      'pending': '#ffc107',
      'checkpayment': '#17a2b8',
      'approvepayment': '#28a745',
      'rejectpayment': '#dc3545',
      'processing': '#007bff',
      'delivering': '#fd7e14',
      'delivered': '#20c997',
      'completed': '#28a745',
      'cancelled': '#6c757d'
    };
    return colorMap[status] || '#6c757d';
  };

  const handleViewDetails = (bookingId) => {
    router.push(`/Farmer/viewmybooking/${bookingId}`);
  };

  const handleViewStatus = (bookingId) => {
    router.push(`/Farmer/delivery-status/${bookingId}`);
  };

  useEffect(() => {
    const fetchBookings = async () => {
      try {
        setLoading(true);
        const farmerToken = JSON.parse(localStorage.getItem("farmerAuth"));
        const token = farmerToken?.token;

        const res = await fetch(
          "http://localhost:8080/booking/bookings-with-equipment",
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );

        if (!res.ok) throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ");

        const data = await res.json();
        setBookings(data);
      } catch (err) {
        setError(err.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      } finally {
        setLoading(false);
      }
    };

    fetchBookings();
  }, []);

  if (loading) {
    return (
      <div className={styles.pageContainer}>
        <MainHeader />
        <main className={styles.mainContent}>
          <div className={styles.loadingContainer}>
            <div className={styles.spinner}></div>
            <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
          </div>
        </main>
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.pageContainer}>
        <MainHeader />
        <main className={styles.mainContent}>
          <div className={styles.errorContainer}>
            <p className={styles.errorText}>{error}</p>
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className={styles.pageContainer}>
      <MainHeader />
      <main className={styles.mainContent}>
        <div className={styles.header}>
          <h1 className={styles.title}>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</h1>
          <p className={styles.subtitle}>‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
        </div>

        {bookings.length === 0 ? (
          <div className={styles.emptyState}>
            <div className={styles.emptyIcon}>üì¶</div>
            <h3>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</h3>
            <p>‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà</p>
          </div>
        ) : (
          <div className={styles.tableContainer}>
            <table className={styles.bookingsTable}>
              <thead>
                <tr>
                  <th>‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</th>
                  <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡πà‡∏≤</th>
                  <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô</th>
                  <th>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</th>
                  <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</th>
                  <th>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°</th>
                  <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                  <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                </tr>
              </thead>
              <tbody>
                {bookings.map((booking) => (
                  <tr key={booking.bookingId} className={styles.bookingRow}>
                    <td className={styles.bookingId}>#{booking.bookingId}</td>
                    <td>
                      {booking.bookingStartDate ? 
                        new Date(booking.bookingStartDate).toLocaleDateString('th-TH') : 
                        '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
                      }
                    </td>
                    <td>
                      {booking.bookingEndDate ? 
                        new Date(booking.bookingEndDate).toLocaleDateString('th-TH') : 
                        '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
                      }
                    </td>
                    <td className={styles.address}>
                      {booking.bookingchangeAddress || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
                    </td>
                    <td className={styles.equipmentCount}>
                      {booking.equipmentList ? booking.equipmentList.length : 0} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                    </td>
                    <td className={styles.totalPrice}>
                      ‡∏ø{booking.totalPrice ? booking.totalPrice.toLocaleString() : '0'}
                    </td>
                    <td>
                      <span 
                        className={styles.statusBadge}
                        style={{ backgroundColor: getStatusColor(booking.bookingStatus) }}
                      >
                        {getStatusText(booking.bookingStatus)}
                      </span>
                    </td>
                    <td>
                      <div className={styles.buttonGroup}>
                        <button
                          onClick={() => handleViewDetails(booking.bookingId)}
                          className={styles.viewButton}
                        >
                          ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                        </button>
                        <button
                          onClick={() => handleViewStatus(booking.bookingId)}
                          className={styles.statusButton}
                        >
                          ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        {bookings.length > 0 && (
          <div className={styles.summary}>
            ‡πÅ‡∏™‡∏î‡∏á {bookings.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
          </div>
        )}
      </main>
    </div>
  );
}
